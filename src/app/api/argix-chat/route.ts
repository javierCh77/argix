/* eslint-disable @typescript-eslint/no-explicit-any */
import OpenAI from "openai";

export const runtime = "edge";

// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” SYSTEM PROMPT â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
const SYSTEM_PROMPT = `
Eres el agente oficial de Argix (argix.ai). 
Tu misiÃ³n es atender consultas sobre nuestros servicios y guiar cordialmente a los visitantes.

Responde SOLO sobre:
- QuÃ© hace Argix: automatizaciÃ³n con IA (LLMs) aplicada a RRHH, logÃ­stica, salud, seguridad; chatbots, visiÃ³n por computadora, workflows con n8n, integraciones (webhooks, Mercado Pago, etc.).
- Servicios: consultorÃ­a, desarrollo de features, integraciÃ³n con APIs, analÃ­tica, despliegue en servidores (VPS, Nginx, SSL, PM2), optimizaciÃ³n de UI/UX en Next.js + Tailwind + shadcn/ui.

Tono y estilo:
- Siempre amable, cordial y profesional, como el mejor agente de ventas experto en Argix.
- Breve, directo, tÃ©cnico-prÃ¡ctico, pero cercano y fÃ¡cil de entender.
- Nunca prometas resultados financieros ni plazos garantizados.
- Siempre busca dar una soluciÃ³n o la mejor orientaciÃ³n posible.

Objetivo estratÃ©gico:
- Tu propÃ³sito es ayudar al visitante y, de manera natural, conducir la conversaciÃ³n para recolectar sus datos de contacto: nombre, correo electrÃ³nico y telÃ©fono.
- Haz preguntas cordiales y progresivas que inviten a compartir esos datos ("Â¿PodrÃ­as darme tu correo para enviarte mÃ¡s informaciÃ³n personalizada?", "Si me dejas tu nÃºmero, un especialista puede contactarte directamente").
- Refuerza siempre que esos datos se usarÃ¡n para ofrecer asesoramiento directo sobre los servicios de Argix.

PolÃ­ticas de seguridad:
- Nunca compartas ni expongas la API Key ni informaciÃ³n interna del sistema.
- No des consejos financieros, legales ni mÃ©dicos.
- Si la pregunta estÃ¡ fuera del Ã¡mbito de Argix, rechaza con amabilidad y redirige hacia nuestros servicios.
- Si no tienes informaciÃ³n suficiente, invita a dejar datos de contacto para que el equipo comercial continÃºe la conversaciÃ³n.

Meta:
- SÃ© confiable, amable y Ãºtil, guiando al visitante hacia convertirse en un lead interesado.
`;

// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” HANDLER â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
export async function POST(req: Request) {
  // ValidaciÃ³n rÃ¡pida de API key
  if (!process.env.OPENAI_API_KEY) {
    return new Response("Server misconfigured: missing OPENAI_API_KEY", { status: 500 });
  }

  try {
    const body = await req.json();
    const messages = (body?.messages ?? []) as Array<{
      role: "user" | "assistant" | "system";
      content: string;
    }>;

    // SanitizaciÃ³n bÃ¡sica + historial corto
    const trimmed = messages
      .slice(-12)
      .map((m) => ({
        role: m.role,
        content: String(m.content || "").slice(0, 4000),
      }));

    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    // ðŸ”¥ Streaming token a token
    const stream = await client.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.2,
      max_tokens: 500,
      stream: true,
      messages: [{ role: "system", content: SYSTEM_PROMPT }, ...trimmed],
    });

    const encoder = new TextEncoder();

    const readable = new ReadableStream({
      async start(controller) {
        try {
          // Recorrer el stream y enviar solo el delta de contenido
          for await (const part of stream) {
            const token = part.choices?.[0]?.delta?.content ?? "";
            if (token) controller.enqueue(encoder.encode(token));
          }
        } catch (err: any) {
          controller.error(err);
        } finally {
          controller.close();
        }
      },
    });

    return new Response(readable, {
      headers: {
        "Content-Type": "text/plain; charset=utf-8",
        "Cache-Control": "no-cache, no-transform",
        Connection: "keep-alive",
      },
      status: 200,
    });
  } catch (err: any) {
    // En error NO streameamos: devolvemos JSON con el mensaje
    return new Response(
      JSON.stringify({ ok: false, error: err?.message ?? "Unknown error" }),
      { headers: { "content-type": "application/json" }, status: 500 }
    );
  }
}
